<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloud native on 小贺的博客</title>
    <link>https://he2121.github.io/xiaohe-blog/tags/cloud-native/</link>
    <description>Recent content in cloud native on 小贺的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 09 Dec 2021 14:30:00 +0800</lastBuildDate><atom:link href="https://he2121.github.io/xiaohe-blog/tags/cloud-native/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分布式链路追踪 Jaeger 快速入门-01</title>
      <link>https://he2121.github.io/xiaohe-blog/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AAjaeger%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-01/</link>
      <pubDate>Thu, 09 Dec 2021 14:30:00 +0800</pubDate>
      
      <guid>https://he2121.github.io/xiaohe-blog/posts/%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AAjaeger%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-01/</guid>
      <description>Logging，Metrics 与 Tracing 关系 🔗同：都是为了提高基础设施和应用程序的可观测性
区别：
   &amp;mdash;- Logging Metrics Tracing     特点 记录离散的事件 记录可聚合的数据 记录请求范围内的信息   典型指标 用户自行打印的调试信息&amp;hellip; QPS, 接口时延分布 一个具体 RPC 调用中的过程：各个服务的耗时占比   典型应用 ELK(收集，分析), log4j（记录）&amp;hellip; Prometheus&amp;hellip; Dapper, OpenZipkin,Jaeger&amp;hellip;    它们之间有重叠，但各自关注的重点不同
OpenTracing 是什么 🔗 当今乃是微服务的天下，Tracing 是给跨进程、服务的追踪提供了一种解决方案 OpenTracing API 提供了一个标准的、厂商中立的规范。其允许系统中存在多种分布式追踪方案 - 只要符合规范  OpenTracing 数据模型 🔗Trace(调用链)：一个调用链代表一个事务或者流程在（分布式）系统中的执行过程。在OpenTracing标准中，调用链是多个Span组成的一个有向无环图（Directed Acyclic Graph，简称DAG）
Span(跨度)：一个名字、有时间的操作，代表工作流程的一个部分。span 上一般有以下信息：span 名字，span 起始时间、结束时间，tag，log，span context，span 之间的引用关系。
SpanContext：伴随着分布式的跟踪信息，它通过网络或通过消息总线透传上下文信息。span 上下文包含 tracing 标识符、span 标识符以及追踪系统需要传播给下游服务的任何其他数据。
span 之间的关系：</description>
    </item>
    
    <item>
      <title>Prometheus 快速入门-02</title>
      <link>https://he2121.github.io/xiaohe-blog/posts/prometheus-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-02/</link>
      <pubDate>Wed, 08 Dec 2021 14:30:00 +0800</pubDate>
      
      <guid>https://he2121.github.io/xiaohe-blog/posts/prometheus-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-02/</guid>
      <description>数据模型 🔗Prometheus 底层将所有数据存储为时间序列: 即以相同 metric 和 label 维度聚合的带时间戳的流。
时序格式 🔗下面格式表示一个 metric 和 label 的时序数据集合
&amp;lt;metric name&amp;gt;{&amp;lt;label name&amp;gt;=&amp;lt;label value&amp;gt;, ...} 例如，一个时间序列的度量名称 api_http_requests_total 和 label 方法=&amp;ldquo;POST&amp;rdquo; 和handler=&amp;quot;/messages&amp;quot;可以写成这样:
api_http_requests_total{method=&amp;#34;POST&amp;#34;, handler=&amp;#34;/messages&amp;#34;} 采样 🔗Prometheus 通过 pull 收到各个 metric 的实际数据，样本形成实际的时间序列数据，每个样本包括:
  float64值
  一个毫秒精度时间戳
  小结 🔗 Prometheus 以 metric 和 label 的维度聚合时序数据 Prometheus 以 pull 方式，收集各个监控目标上 metric 的值与时间戳  Metric 类型 🔗Prometheus Metric 有四种类型：Counter，Gauge，Histogram，Summary
Counter 🔗  特性：只增不减
  适用：服务请求数、已完成任务数、错误出现次数等
  示例：http 请求数</description>
    </item>
    
    <item>
      <title>Prometheus 快速入门-01</title>
      <link>https://he2121.github.io/xiaohe-blog/posts/prometheus-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-01/</link>
      <pubDate>Mon, 06 Dec 2021 14:30:00 +0800</pubDate>
      
      <guid>https://he2121.github.io/xiaohe-blog/posts/prometheus-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-01/</guid>
      <description>Prometheus 是什么 🔗Prometheus 是 SoundCloud 公司开源的系统监控告警工具。2016 年，继 k8s 后，作为第二个托管项目加入了云原生计算基金会。这个项目拥有着非常活跃的开发者和用户社区，随着云原生和 k8s的推广，越来越多的公司的运维都是使用 Prometheus + Grafana（可视化） 的这一套。
Prometheus 以时序数据的形式收集和存储其指标，同时支持添加自定义 label 的可选键值对
监控对象 🔗 硬件状态：电源状态、CPU 状态、机器温度、风扇状态&amp;hellip; 服务器基础：CPU，内存，磁盘，网络 使用情况 数据库: MySQL, ES &amp;hellip; 中间件：Nginx, MQ.. 应用：QPS，接口延时，线程数&amp;hellip;  Prometheus 优势 🔗其他方案
 Zabbix: 1998 年诞生&amp;hellip; 属于传统主机监控，主要用于物理主机，交换机，网络等监控 Graphite: 专注于两件事，存储时序数据， 可视化数据, 其它功能都要安装插件实现, Prometheus 功能丰富：趋势，查询&amp;hellip; InfluxDB: 时序数据库&amp;hellip; 监控部分自己搞，prometheus 不仅仅局限于存储时序数据 Nagios：90 年代诞生&amp;hellip; Sensu ：可以看作 Nagiosde 的升级版本 Open-falcon：小米开源，社区活跃度一般  优势
 云原生支持好，K8s 和 Etcd 等一列项目都提供了对 Prometheus 的原生支持，是目前容器监控最流行的方案 Prometheus 属于一站式监控告警平台，依赖少，功能齐全。 多维数据模型，聚合统计更方便 强大的查询语句  劣势</description>
    </item>
    
  </channel>
</rss>
